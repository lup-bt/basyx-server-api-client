# coding: utf-8

"""
    BaSyx Asset Administration Shell Repository HTTP REST-API

    The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API  # noqa: E501

    OpenAPI spec version: v1
    Contact: constantin.ziesche@bosch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvocationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'inoutput_arguments': 'list[OperationVariable]',
        'output_arguments': 'list[OperationVariable]',
        'operation_result': 'Result',
        'execution_state': 'str'
    }

    attribute_map = {
        'request_id': 'requestId',
        'inoutput_arguments': 'inoutputArguments',
        'output_arguments': 'outputArguments',
        'operation_result': 'operationResult',
        'execution_state': 'executionState'
    }

    def __init__(self, request_id=None, inoutput_arguments=None, output_arguments=None, operation_result=None, execution_state=None):  # noqa: E501
        """InvocationResponse - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._inoutput_arguments = None
        self._output_arguments = None
        self._operation_result = None
        self._execution_state = None
        self.discriminator = None
        if request_id is not None:
            self.request_id = request_id
        if inoutput_arguments is not None:
            self.inoutput_arguments = inoutput_arguments
        if output_arguments is not None:
            self.output_arguments = output_arguments
        if operation_result is not None:
            self.operation_result = operation_result
        if execution_state is not None:
            self.execution_state = execution_state

    @property
    def request_id(self):
        """Gets the request_id of this InvocationResponse.  # noqa: E501


        :return: The request_id of this InvocationResponse.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this InvocationResponse.


        :param request_id: The request_id of this InvocationResponse.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def inoutput_arguments(self):
        """Gets the inoutput_arguments of this InvocationResponse.  # noqa: E501


        :return: The inoutput_arguments of this InvocationResponse.  # noqa: E501
        :rtype: list[OperationVariable]
        """
        return self._inoutput_arguments

    @inoutput_arguments.setter
    def inoutput_arguments(self, inoutput_arguments):
        """Sets the inoutput_arguments of this InvocationResponse.


        :param inoutput_arguments: The inoutput_arguments of this InvocationResponse.  # noqa: E501
        :type: list[OperationVariable]
        """

        self._inoutput_arguments = inoutput_arguments

    @property
    def output_arguments(self):
        """Gets the output_arguments of this InvocationResponse.  # noqa: E501


        :return: The output_arguments of this InvocationResponse.  # noqa: E501
        :rtype: list[OperationVariable]
        """
        return self._output_arguments

    @output_arguments.setter
    def output_arguments(self, output_arguments):
        """Sets the output_arguments of this InvocationResponse.


        :param output_arguments: The output_arguments of this InvocationResponse.  # noqa: E501
        :type: list[OperationVariable]
        """

        self._output_arguments = output_arguments

    @property
    def operation_result(self):
        """Gets the operation_result of this InvocationResponse.  # noqa: E501


        :return: The operation_result of this InvocationResponse.  # noqa: E501
        :rtype: Result
        """
        return self._operation_result

    @operation_result.setter
    def operation_result(self, operation_result):
        """Sets the operation_result of this InvocationResponse.


        :param operation_result: The operation_result of this InvocationResponse.  # noqa: E501
        :type: Result
        """

        self._operation_result = operation_result

    @property
    def execution_state(self):
        """Gets the execution_state of this InvocationResponse.  # noqa: E501


        :return: The execution_state of this InvocationResponse.  # noqa: E501
        :rtype: str
        """
        return self._execution_state

    @execution_state.setter
    def execution_state(self, execution_state):
        """Sets the execution_state of this InvocationResponse.


        :param execution_state: The execution_state of this InvocationResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Initiated", "Running", "Completed", "Canceled", "Failed", "Timeout"]  # noqa: E501
        if execution_state not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_state` ({0}), must be one of {1}"  # noqa: E501
                .format(execution_state, allowed_values)
            )

        self._execution_state = execution_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvocationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvocationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
