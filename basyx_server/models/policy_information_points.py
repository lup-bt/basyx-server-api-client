# coding: utf-8

"""
    BaSyx Asset Administration Shell Repository HTTP REST-API

    The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API  # noqa: E501

    OpenAPI spec version: v1
    Contact: constantin.ziesche@bosch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PolicyInformationPoints(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_information_point': 'list[Reference]',
        'external_information_point': 'bool'
    }

    attribute_map = {
        'internal_information_point': 'internalInformationPoint',
        'external_information_point': 'externalInformationPoint'
    }

    def __init__(self, internal_information_point=None, external_information_point=None):  # noqa: E501
        """PolicyInformationPoints - a model defined in Swagger"""  # noqa: E501
        self._internal_information_point = None
        self._external_information_point = None
        self.discriminator = None
        if internal_information_point is not None:
            self.internal_information_point = internal_information_point
        self.external_information_point = external_information_point

    @property
    def internal_information_point(self):
        """Gets the internal_information_point of this PolicyInformationPoints.  # noqa: E501


        :return: The internal_information_point of this PolicyInformationPoints.  # noqa: E501
        :rtype: list[Reference]
        """
        return self._internal_information_point

    @internal_information_point.setter
    def internal_information_point(self, internal_information_point):
        """Sets the internal_information_point of this PolicyInformationPoints.


        :param internal_information_point: The internal_information_point of this PolicyInformationPoints.  # noqa: E501
        :type: list[Reference]
        """

        self._internal_information_point = internal_information_point

    @property
    def external_information_point(self):
        """Gets the external_information_point of this PolicyInformationPoints.  # noqa: E501


        :return: The external_information_point of this PolicyInformationPoints.  # noqa: E501
        :rtype: bool
        """
        return self._external_information_point

    @external_information_point.setter
    def external_information_point(self, external_information_point):
        """Sets the external_information_point of this PolicyInformationPoints.


        :param external_information_point: The external_information_point of this PolicyInformationPoints.  # noqa: E501
        :type: bool
        """
        if external_information_point is None:
            raise ValueError("Invalid value for `external_information_point`, must not be `None`")  # noqa: E501

        self._external_information_point = external_information_point

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyInformationPoints, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyInformationPoints):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
