# coding: utf-8

"""
    BaSyx Asset Administration Shell Repository HTTP REST-API

    The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API  # noqa: E501

    OpenAPI spec version: v1
    Contact: constantin.ziesche@bosch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccessControlPolicyPoints(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'policy_administration_point': 'PolicyAdministrationPoint',
        'policy_decision_point': 'PolicyDecisionPoint',
        'policy_enforcement_point': 'PolicyEnforcementPoint',
        'policy_information_points': 'PolicyInformationPoints'
    }

    attribute_map = {
        'policy_administration_point': 'policyAdministrationPoint',
        'policy_decision_point': 'policyDecisionPoint',
        'policy_enforcement_point': 'policyEnforcementPoint',
        'policy_information_points': 'policyInformationPoints'
    }

    def __init__(self, policy_administration_point=None, policy_decision_point=None, policy_enforcement_point=None, policy_information_points=None):  # noqa: E501
        """AccessControlPolicyPoints - a model defined in Swagger"""  # noqa: E501
        self._policy_administration_point = None
        self._policy_decision_point = None
        self._policy_enforcement_point = None
        self._policy_information_points = None
        self.discriminator = None
        self.policy_administration_point = policy_administration_point
        self.policy_decision_point = policy_decision_point
        self.policy_enforcement_point = policy_enforcement_point
        if policy_information_points is not None:
            self.policy_information_points = policy_information_points

    @property
    def policy_administration_point(self):
        """Gets the policy_administration_point of this AccessControlPolicyPoints.  # noqa: E501


        :return: The policy_administration_point of this AccessControlPolicyPoints.  # noqa: E501
        :rtype: PolicyAdministrationPoint
        """
        return self._policy_administration_point

    @policy_administration_point.setter
    def policy_administration_point(self, policy_administration_point):
        """Sets the policy_administration_point of this AccessControlPolicyPoints.


        :param policy_administration_point: The policy_administration_point of this AccessControlPolicyPoints.  # noqa: E501
        :type: PolicyAdministrationPoint
        """
        if policy_administration_point is None:
            raise ValueError("Invalid value for `policy_administration_point`, must not be `None`")  # noqa: E501

        self._policy_administration_point = policy_administration_point

    @property
    def policy_decision_point(self):
        """Gets the policy_decision_point of this AccessControlPolicyPoints.  # noqa: E501


        :return: The policy_decision_point of this AccessControlPolicyPoints.  # noqa: E501
        :rtype: PolicyDecisionPoint
        """
        return self._policy_decision_point

    @policy_decision_point.setter
    def policy_decision_point(self, policy_decision_point):
        """Sets the policy_decision_point of this AccessControlPolicyPoints.


        :param policy_decision_point: The policy_decision_point of this AccessControlPolicyPoints.  # noqa: E501
        :type: PolicyDecisionPoint
        """
        if policy_decision_point is None:
            raise ValueError("Invalid value for `policy_decision_point`, must not be `None`")  # noqa: E501

        self._policy_decision_point = policy_decision_point

    @property
    def policy_enforcement_point(self):
        """Gets the policy_enforcement_point of this AccessControlPolicyPoints.  # noqa: E501


        :return: The policy_enforcement_point of this AccessControlPolicyPoints.  # noqa: E501
        :rtype: PolicyEnforcementPoint
        """
        return self._policy_enforcement_point

    @policy_enforcement_point.setter
    def policy_enforcement_point(self, policy_enforcement_point):
        """Sets the policy_enforcement_point of this AccessControlPolicyPoints.


        :param policy_enforcement_point: The policy_enforcement_point of this AccessControlPolicyPoints.  # noqa: E501
        :type: PolicyEnforcementPoint
        """
        if policy_enforcement_point is None:
            raise ValueError("Invalid value for `policy_enforcement_point`, must not be `None`")  # noqa: E501

        self._policy_enforcement_point = policy_enforcement_point

    @property
    def policy_information_points(self):
        """Gets the policy_information_points of this AccessControlPolicyPoints.  # noqa: E501


        :return: The policy_information_points of this AccessControlPolicyPoints.  # noqa: E501
        :rtype: PolicyInformationPoints
        """
        return self._policy_information_points

    @policy_information_points.setter
    def policy_information_points(self, policy_information_points):
        """Sets the policy_information_points of this AccessControlPolicyPoints.


        :param policy_information_points: The policy_information_points of this AccessControlPolicyPoints.  # noqa: E501
        :type: PolicyInformationPoints
        """

        self._policy_information_points = policy_information_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessControlPolicyPoints, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessControlPolicyPoints):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
