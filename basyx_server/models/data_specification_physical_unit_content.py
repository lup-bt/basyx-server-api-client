# coding: utf-8

"""
    BaSyx Asset Administration Shell Repository HTTP REST-API

    The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API  # noqa: E501

    OpenAPI spec version: v1
    Contact: constantin.ziesche@bosch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataSpecificationPhysicalUnitContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unit_name': 'str',
        'unit_symbol': 'str',
        'definition': 'list[LangString]',
        'si_notation': 'str',
        'si_name': 'str',
        'din_notation': 'str',
        'ece_name': 'str',
        'ece_code': 'str',
        'nist_name': 'str',
        'source_of_definition': 'str',
        'conversion_factor': 'str',
        'registration_authority_id': 'str',
        'supplier': 'str'
    }

    attribute_map = {
        'unit_name': 'unitName',
        'unit_symbol': 'unitSymbol',
        'definition': 'definition',
        'si_notation': 'siNotation',
        'si_name': 'siName',
        'din_notation': 'dinNotation',
        'ece_name': 'eceName',
        'ece_code': 'eceCode',
        'nist_name': 'nistName',
        'source_of_definition': 'sourceOfDefinition',
        'conversion_factor': 'conversionFactor',
        'registration_authority_id': 'registrationAuthorityId',
        'supplier': 'supplier'
    }

    def __init__(self, unit_name=None, unit_symbol=None, definition=None, si_notation=None, si_name=None, din_notation=None, ece_name=None, ece_code=None, nist_name=None, source_of_definition=None, conversion_factor=None, registration_authority_id=None, supplier=None):  # noqa: E501
        """DataSpecificationPhysicalUnitContent - a model defined in Swagger"""  # noqa: E501
        self._unit_name = None
        self._unit_symbol = None
        self._definition = None
        self._si_notation = None
        self._si_name = None
        self._din_notation = None
        self._ece_name = None
        self._ece_code = None
        self._nist_name = None
        self._source_of_definition = None
        self._conversion_factor = None
        self._registration_authority_id = None
        self._supplier = None
        self.discriminator = None
        self.unit_name = unit_name
        self.unit_symbol = unit_symbol
        self.definition = definition
        if si_notation is not None:
            self.si_notation = si_notation
        if si_name is not None:
            self.si_name = si_name
        if din_notation is not None:
            self.din_notation = din_notation
        if ece_name is not None:
            self.ece_name = ece_name
        if ece_code is not None:
            self.ece_code = ece_code
        if nist_name is not None:
            self.nist_name = nist_name
        if source_of_definition is not None:
            self.source_of_definition = source_of_definition
        if conversion_factor is not None:
            self.conversion_factor = conversion_factor
        if registration_authority_id is not None:
            self.registration_authority_id = registration_authority_id
        if supplier is not None:
            self.supplier = supplier

    @property
    def unit_name(self):
        """Gets the unit_name of this DataSpecificationPhysicalUnitContent.  # noqa: E501


        :return: The unit_name of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :rtype: str
        """
        return self._unit_name

    @unit_name.setter
    def unit_name(self, unit_name):
        """Sets the unit_name of this DataSpecificationPhysicalUnitContent.


        :param unit_name: The unit_name of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :type: str
        """
        if unit_name is None:
            raise ValueError("Invalid value for `unit_name`, must not be `None`")  # noqa: E501

        self._unit_name = unit_name

    @property
    def unit_symbol(self):
        """Gets the unit_symbol of this DataSpecificationPhysicalUnitContent.  # noqa: E501


        :return: The unit_symbol of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :rtype: str
        """
        return self._unit_symbol

    @unit_symbol.setter
    def unit_symbol(self, unit_symbol):
        """Sets the unit_symbol of this DataSpecificationPhysicalUnitContent.


        :param unit_symbol: The unit_symbol of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :type: str
        """
        if unit_symbol is None:
            raise ValueError("Invalid value for `unit_symbol`, must not be `None`")  # noqa: E501

        self._unit_symbol = unit_symbol

    @property
    def definition(self):
        """Gets the definition of this DataSpecificationPhysicalUnitContent.  # noqa: E501


        :return: The definition of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :rtype: list[LangString]
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this DataSpecificationPhysicalUnitContent.


        :param definition: The definition of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :type: list[LangString]
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")  # noqa: E501

        self._definition = definition

    @property
    def si_notation(self):
        """Gets the si_notation of this DataSpecificationPhysicalUnitContent.  # noqa: E501


        :return: The si_notation of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :rtype: str
        """
        return self._si_notation

    @si_notation.setter
    def si_notation(self, si_notation):
        """Sets the si_notation of this DataSpecificationPhysicalUnitContent.


        :param si_notation: The si_notation of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :type: str
        """

        self._si_notation = si_notation

    @property
    def si_name(self):
        """Gets the si_name of this DataSpecificationPhysicalUnitContent.  # noqa: E501


        :return: The si_name of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :rtype: str
        """
        return self._si_name

    @si_name.setter
    def si_name(self, si_name):
        """Sets the si_name of this DataSpecificationPhysicalUnitContent.


        :param si_name: The si_name of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :type: str
        """

        self._si_name = si_name

    @property
    def din_notation(self):
        """Gets the din_notation of this DataSpecificationPhysicalUnitContent.  # noqa: E501


        :return: The din_notation of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :rtype: str
        """
        return self._din_notation

    @din_notation.setter
    def din_notation(self, din_notation):
        """Sets the din_notation of this DataSpecificationPhysicalUnitContent.


        :param din_notation: The din_notation of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :type: str
        """

        self._din_notation = din_notation

    @property
    def ece_name(self):
        """Gets the ece_name of this DataSpecificationPhysicalUnitContent.  # noqa: E501


        :return: The ece_name of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :rtype: str
        """
        return self._ece_name

    @ece_name.setter
    def ece_name(self, ece_name):
        """Sets the ece_name of this DataSpecificationPhysicalUnitContent.


        :param ece_name: The ece_name of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :type: str
        """

        self._ece_name = ece_name

    @property
    def ece_code(self):
        """Gets the ece_code of this DataSpecificationPhysicalUnitContent.  # noqa: E501


        :return: The ece_code of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :rtype: str
        """
        return self._ece_code

    @ece_code.setter
    def ece_code(self, ece_code):
        """Sets the ece_code of this DataSpecificationPhysicalUnitContent.


        :param ece_code: The ece_code of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :type: str
        """

        self._ece_code = ece_code

    @property
    def nist_name(self):
        """Gets the nist_name of this DataSpecificationPhysicalUnitContent.  # noqa: E501


        :return: The nist_name of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :rtype: str
        """
        return self._nist_name

    @nist_name.setter
    def nist_name(self, nist_name):
        """Sets the nist_name of this DataSpecificationPhysicalUnitContent.


        :param nist_name: The nist_name of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :type: str
        """

        self._nist_name = nist_name

    @property
    def source_of_definition(self):
        """Gets the source_of_definition of this DataSpecificationPhysicalUnitContent.  # noqa: E501


        :return: The source_of_definition of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :rtype: str
        """
        return self._source_of_definition

    @source_of_definition.setter
    def source_of_definition(self, source_of_definition):
        """Sets the source_of_definition of this DataSpecificationPhysicalUnitContent.


        :param source_of_definition: The source_of_definition of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :type: str
        """

        self._source_of_definition = source_of_definition

    @property
    def conversion_factor(self):
        """Gets the conversion_factor of this DataSpecificationPhysicalUnitContent.  # noqa: E501


        :return: The conversion_factor of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :rtype: str
        """
        return self._conversion_factor

    @conversion_factor.setter
    def conversion_factor(self, conversion_factor):
        """Sets the conversion_factor of this DataSpecificationPhysicalUnitContent.


        :param conversion_factor: The conversion_factor of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :type: str
        """

        self._conversion_factor = conversion_factor

    @property
    def registration_authority_id(self):
        """Gets the registration_authority_id of this DataSpecificationPhysicalUnitContent.  # noqa: E501


        :return: The registration_authority_id of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :rtype: str
        """
        return self._registration_authority_id

    @registration_authority_id.setter
    def registration_authority_id(self, registration_authority_id):
        """Sets the registration_authority_id of this DataSpecificationPhysicalUnitContent.


        :param registration_authority_id: The registration_authority_id of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :type: str
        """

        self._registration_authority_id = registration_authority_id

    @property
    def supplier(self):
        """Gets the supplier of this DataSpecificationPhysicalUnitContent.  # noqa: E501


        :return: The supplier of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :rtype: str
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this DataSpecificationPhysicalUnitContent.


        :param supplier: The supplier of this DataSpecificationPhysicalUnitContent.  # noqa: E501
        :type: str
        """

        self._supplier = supplier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataSpecificationPhysicalUnitContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSpecificationPhysicalUnitContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
