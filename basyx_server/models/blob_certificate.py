# coding: utf-8

"""
    BaSyx Asset Administration Shell Repository HTTP REST-API

    The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API  # noqa: E501

    OpenAPI spec version: v1
    Contact: constantin.ziesche@bosch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from basyx_server.models.certificate import Certificate  # noqa: F401,E501

class BlobCertificate(Certificate):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blob_certificate': 'Blob',
        'contained_extension': 'list[Reference]',
        'last_certificate': 'bool'
    }
    if hasattr(Certificate, "swagger_types"):
        swagger_types.update(Certificate.swagger_types)

    attribute_map = {
        'blob_certificate': 'blobCertificate',
        'contained_extension': 'containedExtension',
        'last_certificate': 'lastCertificate'
    }
    if hasattr(Certificate, "attribute_map"):
        attribute_map.update(Certificate.attribute_map)

    def __init__(self, blob_certificate=None, contained_extension=None, last_certificate=None, *args, **kwargs):  # noqa: E501
        """BlobCertificate - a model defined in Swagger"""  # noqa: E501
        self._blob_certificate = None
        self._contained_extension = None
        self._last_certificate = None
        self.discriminator = None
        if blob_certificate is not None:
            self.blob_certificate = blob_certificate
        if contained_extension is not None:
            self.contained_extension = contained_extension
        if last_certificate is not None:
            self.last_certificate = last_certificate
        Certificate.__init__(self, *args, **kwargs)

    @property
    def blob_certificate(self):
        """Gets the blob_certificate of this BlobCertificate.  # noqa: E501


        :return: The blob_certificate of this BlobCertificate.  # noqa: E501
        :rtype: Blob
        """
        return self._blob_certificate

    @blob_certificate.setter
    def blob_certificate(self, blob_certificate):
        """Sets the blob_certificate of this BlobCertificate.


        :param blob_certificate: The blob_certificate of this BlobCertificate.  # noqa: E501
        :type: Blob
        """

        self._blob_certificate = blob_certificate

    @property
    def contained_extension(self):
        """Gets the contained_extension of this BlobCertificate.  # noqa: E501


        :return: The contained_extension of this BlobCertificate.  # noqa: E501
        :rtype: list[Reference]
        """
        return self._contained_extension

    @contained_extension.setter
    def contained_extension(self, contained_extension):
        """Sets the contained_extension of this BlobCertificate.


        :param contained_extension: The contained_extension of this BlobCertificate.  # noqa: E501
        :type: list[Reference]
        """

        self._contained_extension = contained_extension

    @property
    def last_certificate(self):
        """Gets the last_certificate of this BlobCertificate.  # noqa: E501


        :return: The last_certificate of this BlobCertificate.  # noqa: E501
        :rtype: bool
        """
        return self._last_certificate

    @last_certificate.setter
    def last_certificate(self, last_certificate):
        """Sets the last_certificate of this BlobCertificate.


        :param last_certificate: The last_certificate of this BlobCertificate.  # noqa: E501
        :type: bool
        """

        self._last_certificate = last_certificate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlobCertificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlobCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
