# coding: utf-8

"""
    BaSyx Asset Administration Shell Repository HTTP REST-API

    The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API  # noqa: E501

    OpenAPI spec version: v1
    Contact: constantin.ziesche@bosch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Result(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_type': 'str',
        'entity': 'object',
        'success': 'bool',
        'is_exception': 'bool',
        'messages': 'list[Message]'
    }

    attribute_map = {
        'entity_type': 'entityType',
        'entity': 'entity',
        'success': 'success',
        'is_exception': 'isException',
        'messages': 'messages'
    }

    def __init__(self, entity_type=None, entity=None, success=None, is_exception=None, messages=None):  # noqa: E501
        """Result - a model defined in Swagger"""  # noqa: E501
        self._entity_type = None
        self._entity = None
        self._success = None
        self._is_exception = None
        self._messages = None
        self.discriminator = None
        if entity_type is not None:
            self.entity_type = entity_type
        if entity is not None:
            self.entity = entity
        if success is not None:
            self.success = success
        if is_exception is not None:
            self.is_exception = is_exception
        if messages is not None:
            self.messages = messages

    @property
    def entity_type(self):
        """Gets the entity_type of this Result.  # noqa: E501


        :return: The entity_type of this Result.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Result.


        :param entity_type: The entity_type of this Result.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def entity(self):
        """Gets the entity of this Result.  # noqa: E501


        :return: The entity of this Result.  # noqa: E501
        :rtype: object
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this Result.


        :param entity: The entity of this Result.  # noqa: E501
        :type: object
        """

        self._entity = entity

    @property
    def success(self):
        """Gets the success of this Result.  # noqa: E501


        :return: The success of this Result.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this Result.


        :param success: The success of this Result.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def is_exception(self):
        """Gets the is_exception of this Result.  # noqa: E501


        :return: The is_exception of this Result.  # noqa: E501
        :rtype: bool
        """
        return self._is_exception

    @is_exception.setter
    def is_exception(self, is_exception):
        """Sets the is_exception of this Result.


        :param is_exception: The is_exception of this Result.  # noqa: E501
        :type: bool
        """

        self._is_exception = is_exception

    @property
    def messages(self):
        """Gets the messages of this Result.  # noqa: E501


        :return: The messages of this Result.  # noqa: E501
        :rtype: list[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this Result.


        :param messages: The messages of this Result.  # noqa: E501
        :type: list[Message]
        """

        self._messages = messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Result, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Result):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
