# coding: utf-8

"""
    BaSyx Asset Administration Shell Repository HTTP REST-API

    The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API  # noqa: E501

    OpenAPI spec version: v1
    Contact: constantin.ziesche@bosch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccessControl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'selectable_subject_attributes': 'Reference',
        'default_subject_attributes': 'Reference',
        'selectable_permissions': 'Reference',
        'default_permissions': 'Reference',
        'selectable_environment_attributes': 'Reference',
        'default_environment_attributes': 'Reference',
        'access_permission_rule': 'list[AccessPermissionRule]'
    }

    attribute_map = {
        'selectable_subject_attributes': 'selectableSubjectAttributes',
        'default_subject_attributes': 'defaultSubjectAttributes',
        'selectable_permissions': 'selectablePermissions',
        'default_permissions': 'defaultPermissions',
        'selectable_environment_attributes': 'selectableEnvironmentAttributes',
        'default_environment_attributes': 'defaultEnvironmentAttributes',
        'access_permission_rule': 'accessPermissionRule'
    }

    def __init__(self, selectable_subject_attributes=None, default_subject_attributes=None, selectable_permissions=None, default_permissions=None, selectable_environment_attributes=None, default_environment_attributes=None, access_permission_rule=None):  # noqa: E501
        """AccessControl - a model defined in Swagger"""  # noqa: E501
        self._selectable_subject_attributes = None
        self._default_subject_attributes = None
        self._selectable_permissions = None
        self._default_permissions = None
        self._selectable_environment_attributes = None
        self._default_environment_attributes = None
        self._access_permission_rule = None
        self.discriminator = None
        if selectable_subject_attributes is not None:
            self.selectable_subject_attributes = selectable_subject_attributes
        if default_subject_attributes is not None:
            self.default_subject_attributes = default_subject_attributes
        if selectable_permissions is not None:
            self.selectable_permissions = selectable_permissions
        if default_permissions is not None:
            self.default_permissions = default_permissions
        if selectable_environment_attributes is not None:
            self.selectable_environment_attributes = selectable_environment_attributes
        if default_environment_attributes is not None:
            self.default_environment_attributes = default_environment_attributes
        if access_permission_rule is not None:
            self.access_permission_rule = access_permission_rule

    @property
    def selectable_subject_attributes(self):
        """Gets the selectable_subject_attributes of this AccessControl.  # noqa: E501


        :return: The selectable_subject_attributes of this AccessControl.  # noqa: E501
        :rtype: Reference
        """
        return self._selectable_subject_attributes

    @selectable_subject_attributes.setter
    def selectable_subject_attributes(self, selectable_subject_attributes):
        """Sets the selectable_subject_attributes of this AccessControl.


        :param selectable_subject_attributes: The selectable_subject_attributes of this AccessControl.  # noqa: E501
        :type: Reference
        """

        self._selectable_subject_attributes = selectable_subject_attributes

    @property
    def default_subject_attributes(self):
        """Gets the default_subject_attributes of this AccessControl.  # noqa: E501


        :return: The default_subject_attributes of this AccessControl.  # noqa: E501
        :rtype: Reference
        """
        return self._default_subject_attributes

    @default_subject_attributes.setter
    def default_subject_attributes(self, default_subject_attributes):
        """Sets the default_subject_attributes of this AccessControl.


        :param default_subject_attributes: The default_subject_attributes of this AccessControl.  # noqa: E501
        :type: Reference
        """

        self._default_subject_attributes = default_subject_attributes

    @property
    def selectable_permissions(self):
        """Gets the selectable_permissions of this AccessControl.  # noqa: E501


        :return: The selectable_permissions of this AccessControl.  # noqa: E501
        :rtype: Reference
        """
        return self._selectable_permissions

    @selectable_permissions.setter
    def selectable_permissions(self, selectable_permissions):
        """Sets the selectable_permissions of this AccessControl.


        :param selectable_permissions: The selectable_permissions of this AccessControl.  # noqa: E501
        :type: Reference
        """

        self._selectable_permissions = selectable_permissions

    @property
    def default_permissions(self):
        """Gets the default_permissions of this AccessControl.  # noqa: E501


        :return: The default_permissions of this AccessControl.  # noqa: E501
        :rtype: Reference
        """
        return self._default_permissions

    @default_permissions.setter
    def default_permissions(self, default_permissions):
        """Sets the default_permissions of this AccessControl.


        :param default_permissions: The default_permissions of this AccessControl.  # noqa: E501
        :type: Reference
        """

        self._default_permissions = default_permissions

    @property
    def selectable_environment_attributes(self):
        """Gets the selectable_environment_attributes of this AccessControl.  # noqa: E501


        :return: The selectable_environment_attributes of this AccessControl.  # noqa: E501
        :rtype: Reference
        """
        return self._selectable_environment_attributes

    @selectable_environment_attributes.setter
    def selectable_environment_attributes(self, selectable_environment_attributes):
        """Sets the selectable_environment_attributes of this AccessControl.


        :param selectable_environment_attributes: The selectable_environment_attributes of this AccessControl.  # noqa: E501
        :type: Reference
        """

        self._selectable_environment_attributes = selectable_environment_attributes

    @property
    def default_environment_attributes(self):
        """Gets the default_environment_attributes of this AccessControl.  # noqa: E501


        :return: The default_environment_attributes of this AccessControl.  # noqa: E501
        :rtype: Reference
        """
        return self._default_environment_attributes

    @default_environment_attributes.setter
    def default_environment_attributes(self, default_environment_attributes):
        """Sets the default_environment_attributes of this AccessControl.


        :param default_environment_attributes: The default_environment_attributes of this AccessControl.  # noqa: E501
        :type: Reference
        """

        self._default_environment_attributes = default_environment_attributes

    @property
    def access_permission_rule(self):
        """Gets the access_permission_rule of this AccessControl.  # noqa: E501


        :return: The access_permission_rule of this AccessControl.  # noqa: E501
        :rtype: list[AccessPermissionRule]
        """
        return self._access_permission_rule

    @access_permission_rule.setter
    def access_permission_rule(self, access_permission_rule):
        """Sets the access_permission_rule of this AccessControl.


        :param access_permission_rule: The access_permission_rule of this AccessControl.  # noqa: E501
        :type: list[AccessPermissionRule]
        """

        self._access_permission_rule = access_permission_rule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessControl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessControl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
