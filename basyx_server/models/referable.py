# coding: utf-8

"""
    BaSyx Asset Administration Shell Repository HTTP REST-API

    The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API  # noqa: E501

    OpenAPI spec version: v1
    Contact: constantin.ziesche@bosch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Referable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_short': 'str',
        'category': 'str',
        'description': 'list[LangString]',
        'parent': 'Reference',
        'model_type': 'ModelType'
    }

    attribute_map = {
        'id_short': 'idShort',
        'category': 'category',
        'description': 'description',
        'parent': 'parent',
        'model_type': 'modelType'
    }

    def __init__(self, id_short=None, category=None, description=None, parent=None, model_type=None):  # noqa: E501
        """Referable - a model defined in Swagger"""  # noqa: E501
        self._id_short = None
        self._category = None
        self._description = None
        self._parent = None
        self._model_type = None
        self.discriminator = None
        self.id_short = id_short
        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        if parent is not None:
            self.parent = parent
        self.model_type = model_type

    @property
    def id_short(self):
        """Gets the id_short of this Referable.  # noqa: E501


        :return: The id_short of this Referable.  # noqa: E501
        :rtype: str
        """
        return self._id_short

    @id_short.setter
    def id_short(self, id_short):
        """Sets the id_short of this Referable.


        :param id_short: The id_short of this Referable.  # noqa: E501
        :type: str
        """
        if id_short is None:
            raise ValueError("Invalid value for `id_short`, must not be `None`")  # noqa: E501

        self._id_short = id_short

    @property
    def category(self):
        """Gets the category of this Referable.  # noqa: E501


        :return: The category of this Referable.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Referable.


        :param category: The category of this Referable.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this Referable.  # noqa: E501


        :return: The description of this Referable.  # noqa: E501
        :rtype: list[LangString]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Referable.


        :param description: The description of this Referable.  # noqa: E501
        :type: list[LangString]
        """

        self._description = description

    @property
    def parent(self):
        """Gets the parent of this Referable.  # noqa: E501


        :return: The parent of this Referable.  # noqa: E501
        :rtype: Reference
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Referable.


        :param parent: The parent of this Referable.  # noqa: E501
        :type: Reference
        """

        self._parent = parent

    @property
    def model_type(self):
        """Gets the model_type of this Referable.  # noqa: E501


        :return: The model_type of this Referable.  # noqa: E501
        :rtype: ModelType
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this Referable.


        :param model_type: The model_type of this Referable.  # noqa: E501
        :type: ModelType
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501

        self._model_type = model_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Referable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Referable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
