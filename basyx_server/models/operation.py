# coding: utf-8

"""
    BaSyx Asset Administration Shell Repository HTTP REST-API

    The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API  # noqa: E501

    OpenAPI spec version: v1
    Contact: constantin.ziesche@bosch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from basyx_server.models.submodel_element import SubmodelElement  # noqa: F401,E501

class Operation(SubmodelElement):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input_variable': 'list[OperationVariable]',
        'output_variable': 'list[OperationVariable]',
        'inoutput_variable': 'list[OperationVariable]'
    }
    if hasattr(SubmodelElement, "swagger_types"):
        swagger_types.update(SubmodelElement.swagger_types)

    attribute_map = {
        'input_variable': 'inputVariable',
        'output_variable': 'outputVariable',
        'inoutput_variable': 'inoutputVariable'
    }
    if hasattr(SubmodelElement, "attribute_map"):
        attribute_map.update(SubmodelElement.attribute_map)

    def __init__(self, input_variable=None, output_variable=None, inoutput_variable=None, *args, **kwargs):  # noqa: E501
        """Operation - a model defined in Swagger"""  # noqa: E501
        self._input_variable = None
        self._output_variable = None
        self._inoutput_variable = None
        self.discriminator = None
        if input_variable is not None:
            self.input_variable = input_variable
        if output_variable is not None:
            self.output_variable = output_variable
        if inoutput_variable is not None:
            self.inoutput_variable = inoutput_variable
        SubmodelElement.__init__(self, *args, **kwargs)

    @property
    def input_variable(self):
        """Gets the input_variable of this Operation.  # noqa: E501


        :return: The input_variable of this Operation.  # noqa: E501
        :rtype: list[OperationVariable]
        """
        return self._input_variable

    @input_variable.setter
    def input_variable(self, input_variable):
        """Sets the input_variable of this Operation.


        :param input_variable: The input_variable of this Operation.  # noqa: E501
        :type: list[OperationVariable]
        """

        self._input_variable = input_variable

    @property
    def output_variable(self):
        """Gets the output_variable of this Operation.  # noqa: E501


        :return: The output_variable of this Operation.  # noqa: E501
        :rtype: list[OperationVariable]
        """
        return self._output_variable

    @output_variable.setter
    def output_variable(self, output_variable):
        """Sets the output_variable of this Operation.


        :param output_variable: The output_variable of this Operation.  # noqa: E501
        :type: list[OperationVariable]
        """

        self._output_variable = output_variable

    @property
    def inoutput_variable(self):
        """Gets the inoutput_variable of this Operation.  # noqa: E501


        :return: The inoutput_variable of this Operation.  # noqa: E501
        :rtype: list[OperationVariable]
        """
        return self._inoutput_variable

    @inoutput_variable.setter
    def inoutput_variable(self, inoutput_variable):
        """Sets the inoutput_variable of this Operation.


        :param inoutput_variable: The inoutput_variable of this Operation.  # noqa: E501
        :type: list[OperationVariable]
        """

        self._inoutput_variable = inoutput_variable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Operation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Operation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
