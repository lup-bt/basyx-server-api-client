# coding: utf-8

"""
    BaSyx Asset Administration Shell Repository HTTP REST-API

    The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API  # noqa: E501

    OpenAPI spec version: v1
    Contact: constantin.ziesche@bosch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from basyx_server.models.referable import Referable  # noqa: F401,E501

class SubmodelElement(Referable):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'embedded_data_specifications': 'list[EmbeddedDataSpecification]',
        'semantic_id': 'Reference',
        'qualifiers': 'list[Constraint]',
        'kind': 'ModelingKind'
    }
    if hasattr(Referable, "swagger_types"):
        swagger_types.update(Referable.swagger_types)

    attribute_map = {
        'embedded_data_specifications': 'embeddedDataSpecifications',
        'semantic_id': 'semanticId',
        'qualifiers': 'qualifiers',
        'kind': 'kind'
    }
    if hasattr(Referable, "attribute_map"):
        attribute_map.update(Referable.attribute_map)

    def __init__(self, embedded_data_specifications=None, semantic_id=None, qualifiers=None, kind=None, *args, **kwargs):  # noqa: E501
        """SubmodelElement - a model defined in Swagger"""  # noqa: E501
        self._embedded_data_specifications = None
        self._semantic_id = None
        self._qualifiers = None
        self._kind = None
        self.discriminator = None
        if embedded_data_specifications is not None:
            self.embedded_data_specifications = embedded_data_specifications
        if semantic_id is not None:
            self.semantic_id = semantic_id
        if qualifiers is not None:
            self.qualifiers = qualifiers
        if kind is not None:
            self.kind = kind
        Referable.__init__(self, *args, **kwargs)

    @property
    def embedded_data_specifications(self):
        """Gets the embedded_data_specifications of this SubmodelElement.  # noqa: E501


        :return: The embedded_data_specifications of this SubmodelElement.  # noqa: E501
        :rtype: list[EmbeddedDataSpecification]
        """
        return self._embedded_data_specifications

    @embedded_data_specifications.setter
    def embedded_data_specifications(self, embedded_data_specifications):
        """Sets the embedded_data_specifications of this SubmodelElement.


        :param embedded_data_specifications: The embedded_data_specifications of this SubmodelElement.  # noqa: E501
        :type: list[EmbeddedDataSpecification]
        """

        self._embedded_data_specifications = embedded_data_specifications

    @property
    def semantic_id(self):
        """Gets the semantic_id of this SubmodelElement.  # noqa: E501


        :return: The semantic_id of this SubmodelElement.  # noqa: E501
        :rtype: Reference
        """
        return self._semantic_id

    @semantic_id.setter
    def semantic_id(self, semantic_id):
        """Sets the semantic_id of this SubmodelElement.


        :param semantic_id: The semantic_id of this SubmodelElement.  # noqa: E501
        :type: Reference
        """

        self._semantic_id = semantic_id

    @property
    def qualifiers(self):
        """Gets the qualifiers of this SubmodelElement.  # noqa: E501


        :return: The qualifiers of this SubmodelElement.  # noqa: E501
        :rtype: list[Constraint]
        """
        return self._qualifiers

    @qualifiers.setter
    def qualifiers(self, qualifiers):
        """Sets the qualifiers of this SubmodelElement.


        :param qualifiers: The qualifiers of this SubmodelElement.  # noqa: E501
        :type: list[Constraint]
        """

        self._qualifiers = qualifiers

    @property
    def kind(self):
        """Gets the kind of this SubmodelElement.  # noqa: E501


        :return: The kind of this SubmodelElement.  # noqa: E501
        :rtype: ModelingKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SubmodelElement.


        :param kind: The kind of this SubmodelElement.  # noqa: E501
        :type: ModelingKind
        """

        self._kind = kind

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubmodelElement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmodelElement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
