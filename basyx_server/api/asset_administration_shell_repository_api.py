# coding: utf-8

"""
    BaSyx Asset Administration Shell Repository HTTP REST-API

    The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API  # noqa: E501

    OpenAPI spec version: v1
    Contact: constantin.ziesche@bosch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from basyx_server.api_client import ApiClient


class AssetAdministrationShellRepositoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_asset_administration_shell_by_id(self, aas_id, **kwargs):  # noqa: E501
        """Deletes a specific Asset Administration Shell at the Asset Administration Shell repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_asset_administration_shell_by_id(aas_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_asset_administration_shell_by_id_with_http_info(aas_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_asset_administration_shell_by_id_with_http_info(aas_id, **kwargs)  # noqa: E501
            return data

    def delete_asset_administration_shell_by_id_with_http_info(self, aas_id, **kwargs):  # noqa: E501
        """Deletes a specific Asset Administration Shell at the Asset Administration Shell repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_asset_administration_shell_by_id_with_http_info(aas_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_asset_administration_shell_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `delete_asset_administration_shell_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Result',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_asset_administration_shells(self, **kwargs):  # noqa: E501
        """Retrieves all Asset Administration Shells from the Asset Administration Shell repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_asset_administration_shells(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AssetAdministrationShell]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_asset_administration_shells_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_asset_administration_shells_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_asset_administration_shells_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves all Asset Administration Shells from the Asset Administration Shell repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_asset_administration_shells_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AssetAdministrationShell]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_asset_administration_shells" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssetAdministrationShell]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_asset_administration_shell_by_id(self, aas_id, **kwargs):  # noqa: E501
        """Retrieves a specific Asset Administration Shell from the Asset Administration Shell repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_administration_shell_by_id(aas_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :return: AssetAdministrationShell
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_asset_administration_shell_by_id_with_http_info(aas_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_administration_shell_by_id_with_http_info(aas_id, **kwargs)  # noqa: E501
            return data

    def get_asset_administration_shell_by_id_with_http_info(self, aas_id, **kwargs):  # noqa: E501
        """Retrieves a specific Asset Administration Shell from the Asset Administration Shell repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_administration_shell_by_id_with_http_info(aas_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :return: AssetAdministrationShell
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_administration_shell_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `get_asset_administration_shell_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}/aas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetAdministrationShell',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_asset_administration_shell(self, aas_id, **kwargs):  # noqa: E501
        """Creates or updates a Asset Administration Shell at the Asset Administration Shell repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_asset_administration_shell(aas_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param AssetAdministrationShell body: The Asset Administration Shell
        :return: AssetAdministrationShell
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_asset_administration_shell_with_http_info(aas_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_asset_administration_shell_with_http_info(aas_id, **kwargs)  # noqa: E501
            return data

    def put_asset_administration_shell_with_http_info(self, aas_id, **kwargs):  # noqa: E501
        """Creates or updates a Asset Administration Shell at the Asset Administration Shell repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_asset_administration_shell_with_http_info(aas_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param AssetAdministrationShell body: The Asset Administration Shell
        :return: AssetAdministrationShell
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_asset_administration_shell" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `put_asset_administration_shell`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetAdministrationShell',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shell_repo_delete_submodel_element_by_id_short(self, aas_id, submodel_id_short, se_id_short_path, **kwargs):  # noqa: E501
        """Deletes a specific Submodel-Element from the Submodel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_delete_submodel_element_by_id_short(aas_id, submodel_id_short, se_id_short_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :param str se_id_short_path: The Submodel-Element's IdShort-Path (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shell_repo_delete_submodel_element_by_id_short_with_http_info(aas_id, submodel_id_short, se_id_short_path, **kwargs)  # noqa: E501
        else:
            (data) = self.shell_repo_delete_submodel_element_by_id_short_with_http_info(aas_id, submodel_id_short, se_id_short_path, **kwargs)  # noqa: E501
            return data

    def shell_repo_delete_submodel_element_by_id_short_with_http_info(self, aas_id, submodel_id_short, se_id_short_path, **kwargs):  # noqa: E501
        """Deletes a specific Submodel-Element from the Submodel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_delete_submodel_element_by_id_short_with_http_info(aas_id, submodel_id_short, se_id_short_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :param str se_id_short_path: The Submodel-Element's IdShort-Path (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id', 'submodel_id_short', 'se_id_short_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shell_repo_delete_submodel_element_by_id_short" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `shell_repo_delete_submodel_element_by_id_short`")  # noqa: E501
        # verify the required parameter 'submodel_id_short' is set
        if ('submodel_id_short' not in params or
                params['submodel_id_short'] is None):
            raise ValueError("Missing the required parameter `submodel_id_short` when calling `shell_repo_delete_submodel_element_by_id_short`")  # noqa: E501
        # verify the required parameter 'se_id_short_path' is set
        if ('se_id_short_path' not in params or
                params['se_id_short_path'] is None):
            raise ValueError("Missing the required parameter `se_id_short_path` when calling `shell_repo_delete_submodel_element_by_id_short`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501
        if 'submodel_id_short' in params:
            path_params['submodelIdShort'] = params['submodel_id_short']  # noqa: E501
        if 'se_id_short_path' in params:
            path_params['seIdShortPath'] = params['se_id_short_path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements/{seIdShortPath}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Result',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shell_repo_delete_submodel_from_shell_by_id_short(self, aas_id, submodel_id_short, **kwargs):  # noqa: E501
        """Deletes a specific Submodel from the Asset Administration Shell  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_delete_submodel_from_shell_by_id_short(aas_id, submodel_id_short, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shell_repo_delete_submodel_from_shell_by_id_short_with_http_info(aas_id, submodel_id_short, **kwargs)  # noqa: E501
        else:
            (data) = self.shell_repo_delete_submodel_from_shell_by_id_short_with_http_info(aas_id, submodel_id_short, **kwargs)  # noqa: E501
            return data

    def shell_repo_delete_submodel_from_shell_by_id_short_with_http_info(self, aas_id, submodel_id_short, **kwargs):  # noqa: E501
        """Deletes a specific Submodel from the Asset Administration Shell  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_delete_submodel_from_shell_by_id_short_with_http_info(aas_id, submodel_id_short, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id', 'submodel_id_short']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shell_repo_delete_submodel_from_shell_by_id_short" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `shell_repo_delete_submodel_from_shell_by_id_short`")  # noqa: E501
        # verify the required parameter 'submodel_id_short' is set
        if ('submodel_id_short' not in params or
                params['submodel_id_short'] is None):
            raise ValueError("Missing the required parameter `submodel_id_short` when calling `shell_repo_delete_submodel_from_shell_by_id_short`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501
        if 'submodel_id_short' in params:
            path_params['submodelIdShort'] = params['submodel_id_short']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}/aas/submodels/{submodelIdShort}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shell_repo_get_invocation_result_by_id_short(self, aas_id, submodel_id_short, id_short_path_to_operation, request_id, **kwargs):  # noqa: E501
        """Retrieves the result of an asynchronously started operation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_get_invocation_result_by_id_short(aas_id, submodel_id_short, id_short_path_to_operation, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: Submodel's short id (required)
        :param str id_short_path_to_operation: The IdShort path to the Operation (required)
        :param str request_id: The request id (required)
        :return: InvocationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shell_repo_get_invocation_result_by_id_short_with_http_info(aas_id, submodel_id_short, id_short_path_to_operation, request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.shell_repo_get_invocation_result_by_id_short_with_http_info(aas_id, submodel_id_short, id_short_path_to_operation, request_id, **kwargs)  # noqa: E501
            return data

    def shell_repo_get_invocation_result_by_id_short_with_http_info(self, aas_id, submodel_id_short, id_short_path_to_operation, request_id, **kwargs):  # noqa: E501
        """Retrieves the result of an asynchronously started operation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_get_invocation_result_by_id_short_with_http_info(aas_id, submodel_id_short, id_short_path_to_operation, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: Submodel's short id (required)
        :param str id_short_path_to_operation: The IdShort path to the Operation (required)
        :param str request_id: The request id (required)
        :return: InvocationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id', 'submodel_id_short', 'id_short_path_to_operation', 'request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shell_repo_get_invocation_result_by_id_short" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `shell_repo_get_invocation_result_by_id_short`")  # noqa: E501
        # verify the required parameter 'submodel_id_short' is set
        if ('submodel_id_short' not in params or
                params['submodel_id_short'] is None):
            raise ValueError("Missing the required parameter `submodel_id_short` when calling `shell_repo_get_invocation_result_by_id_short`")  # noqa: E501
        # verify the required parameter 'id_short_path_to_operation' is set
        if ('id_short_path_to_operation' not in params or
                params['id_short_path_to_operation'] is None):
            raise ValueError("Missing the required parameter `id_short_path_to_operation` when calling `shell_repo_get_invocation_result_by_id_short`")  # noqa: E501
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `shell_repo_get_invocation_result_by_id_short`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501
        if 'submodel_id_short' in params:
            path_params['submodelIdShort'] = params['submodel_id_short']  # noqa: E501
        if 'id_short_path_to_operation' in params:
            path_params['idShortPathToOperation'] = params['id_short_path_to_operation']  # noqa: E501
        if 'request_id' in params:
            path_params['requestId'] = params['request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements/{idShortPathToOperation}/invocationList/{requestId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvocationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shell_repo_get_submodel_element_by_id_short(self, aas_id, submodel_id_short, se_id_short_path, **kwargs):  # noqa: E501
        """Retrieves a specific Submodel-Element from the Submodel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_get_submodel_element_by_id_short(aas_id, submodel_id_short, se_id_short_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :param str se_id_short_path: The Submodel-Element's IdShort-Path (required)
        :return: SubmodelElement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shell_repo_get_submodel_element_by_id_short_with_http_info(aas_id, submodel_id_short, se_id_short_path, **kwargs)  # noqa: E501
        else:
            (data) = self.shell_repo_get_submodel_element_by_id_short_with_http_info(aas_id, submodel_id_short, se_id_short_path, **kwargs)  # noqa: E501
            return data

    def shell_repo_get_submodel_element_by_id_short_with_http_info(self, aas_id, submodel_id_short, se_id_short_path, **kwargs):  # noqa: E501
        """Retrieves a specific Submodel-Element from the Submodel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_get_submodel_element_by_id_short_with_http_info(aas_id, submodel_id_short, se_id_short_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :param str se_id_short_path: The Submodel-Element's IdShort-Path (required)
        :return: SubmodelElement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id', 'submodel_id_short', 'se_id_short_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shell_repo_get_submodel_element_by_id_short" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `shell_repo_get_submodel_element_by_id_short`")  # noqa: E501
        # verify the required parameter 'submodel_id_short' is set
        if ('submodel_id_short' not in params or
                params['submodel_id_short'] is None):
            raise ValueError("Missing the required parameter `submodel_id_short` when calling `shell_repo_get_submodel_element_by_id_short`")  # noqa: E501
        # verify the required parameter 'se_id_short_path' is set
        if ('se_id_short_path' not in params or
                params['se_id_short_path'] is None):
            raise ValueError("Missing the required parameter `se_id_short_path` when calling `shell_repo_get_submodel_element_by_id_short`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501
        if 'submodel_id_short' in params:
            path_params['submodelIdShort'] = params['submodel_id_short']  # noqa: E501
        if 'se_id_short_path' in params:
            path_params['seIdShortPath'] = params['se_id_short_path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements/{seIdShortPath}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubmodelElement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shell_repo_get_submodel_element_value_by_id_short(self, aas_id, submodel_id_short, se_id_short_path, **kwargs):  # noqa: E501
        """Retrieves the value of a specific Submodel-Element from the Submodel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_get_submodel_element_value_by_id_short(aas_id, submodel_id_short, se_id_short_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :param str se_id_short_path: The Submodel-Element's IdShort-Path (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shell_repo_get_submodel_element_value_by_id_short_with_http_info(aas_id, submodel_id_short, se_id_short_path, **kwargs)  # noqa: E501
        else:
            (data) = self.shell_repo_get_submodel_element_value_by_id_short_with_http_info(aas_id, submodel_id_short, se_id_short_path, **kwargs)  # noqa: E501
            return data

    def shell_repo_get_submodel_element_value_by_id_short_with_http_info(self, aas_id, submodel_id_short, se_id_short_path, **kwargs):  # noqa: E501
        """Retrieves the value of a specific Submodel-Element from the Submodel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_get_submodel_element_value_by_id_short_with_http_info(aas_id, submodel_id_short, se_id_short_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :param str se_id_short_path: The Submodel-Element's IdShort-Path (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id', 'submodel_id_short', 'se_id_short_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shell_repo_get_submodel_element_value_by_id_short" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `shell_repo_get_submodel_element_value_by_id_short`")  # noqa: E501
        # verify the required parameter 'submodel_id_short' is set
        if ('submodel_id_short' not in params or
                params['submodel_id_short'] is None):
            raise ValueError("Missing the required parameter `submodel_id_short` when calling `shell_repo_get_submodel_element_value_by_id_short`")  # noqa: E501
        # verify the required parameter 'se_id_short_path' is set
        if ('se_id_short_path' not in params or
                params['se_id_short_path'] is None):
            raise ValueError("Missing the required parameter `se_id_short_path` when calling `shell_repo_get_submodel_element_value_by_id_short`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501
        if 'submodel_id_short' in params:
            path_params['submodelIdShort'] = params['submodel_id_short']  # noqa: E501
        if 'se_id_short_path' in params:
            path_params['seIdShortPath'] = params['se_id_short_path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements/{seIdShortPath}/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shell_repo_get_submodel_elements(self, aas_id, submodel_id_short, **kwargs):  # noqa: E501
        """Retrieves all Submodel-Elements from the Submodel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_get_submodel_elements(aas_id, submodel_id_short, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :return: list[SubmodelElement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shell_repo_get_submodel_elements_with_http_info(aas_id, submodel_id_short, **kwargs)  # noqa: E501
        else:
            (data) = self.shell_repo_get_submodel_elements_with_http_info(aas_id, submodel_id_short, **kwargs)  # noqa: E501
            return data

    def shell_repo_get_submodel_elements_with_http_info(self, aas_id, submodel_id_short, **kwargs):  # noqa: E501
        """Retrieves all Submodel-Elements from the Submodel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_get_submodel_elements_with_http_info(aas_id, submodel_id_short, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :return: list[SubmodelElement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id', 'submodel_id_short']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shell_repo_get_submodel_elements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `shell_repo_get_submodel_elements`")  # noqa: E501
        # verify the required parameter 'submodel_id_short' is set
        if ('submodel_id_short' not in params or
                params['submodel_id_short'] is None):
            raise ValueError("Missing the required parameter `submodel_id_short` when calling `shell_repo_get_submodel_elements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501
        if 'submodel_id_short' in params:
            path_params['submodelIdShort'] = params['submodel_id_short']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SubmodelElement]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shell_repo_get_submodel_from_shell_by_id_short(self, aas_id, submodel_id_short, **kwargs):  # noqa: E501
        """Retrieves the Submodel from the Asset Administration Shell  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_get_submodel_from_shell_by_id_short(aas_id, submodel_id_short, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :return: Submodel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shell_repo_get_submodel_from_shell_by_id_short_with_http_info(aas_id, submodel_id_short, **kwargs)  # noqa: E501
        else:
            (data) = self.shell_repo_get_submodel_from_shell_by_id_short_with_http_info(aas_id, submodel_id_short, **kwargs)  # noqa: E501
            return data

    def shell_repo_get_submodel_from_shell_by_id_short_with_http_info(self, aas_id, submodel_id_short, **kwargs):  # noqa: E501
        """Retrieves the Submodel from the Asset Administration Shell  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_get_submodel_from_shell_by_id_short_with_http_info(aas_id, submodel_id_short, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :return: Submodel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id', 'submodel_id_short']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shell_repo_get_submodel_from_shell_by_id_short" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `shell_repo_get_submodel_from_shell_by_id_short`")  # noqa: E501
        # verify the required parameter 'submodel_id_short' is set
        if ('submodel_id_short' not in params or
                params['submodel_id_short'] is None):
            raise ValueError("Missing the required parameter `submodel_id_short` when calling `shell_repo_get_submodel_from_shell_by_id_short`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501
        if 'submodel_id_short' in params:
            path_params['submodelIdShort'] = params['submodel_id_short']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}/aas/submodels/{submodelIdShort}/submodel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Submodel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shell_repo_get_submodel_values(self, aas_id, submodel_id_short, **kwargs):  # noqa: E501
        """Retrieves the minimized version of a Submodel, i.e. only the values of SubmodelElements are serialized and returned  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_get_submodel_values(aas_id, submodel_id_short, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shell_repo_get_submodel_values_with_http_info(aas_id, submodel_id_short, **kwargs)  # noqa: E501
        else:
            (data) = self.shell_repo_get_submodel_values_with_http_info(aas_id, submodel_id_short, **kwargs)  # noqa: E501
            return data

    def shell_repo_get_submodel_values_with_http_info(self, aas_id, submodel_id_short, **kwargs):  # noqa: E501
        """Retrieves the minimized version of a Submodel, i.e. only the values of SubmodelElements are serialized and returned  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_get_submodel_values_with_http_info(aas_id, submodel_id_short, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id', 'submodel_id_short']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shell_repo_get_submodel_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `shell_repo_get_submodel_values`")  # noqa: E501
        # verify the required parameter 'submodel_id_short' is set
        if ('submodel_id_short' not in params or
                params['submodel_id_short'] is None):
            raise ValueError("Missing the required parameter `submodel_id_short` when calling `shell_repo_get_submodel_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501
        if 'submodel_id_short' in params:
            path_params['submodelIdShort'] = params['submodel_id_short']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shell_repo_get_submodels_from_shell(self, aas_id, **kwargs):  # noqa: E501
        """Retrieves all Submodels from the  Asset Administration Shell  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_get_submodels_from_shell(aas_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shell_repo_get_submodels_from_shell_with_http_info(aas_id, **kwargs)  # noqa: E501
        else:
            (data) = self.shell_repo_get_submodels_from_shell_with_http_info(aas_id, **kwargs)  # noqa: E501
            return data

    def shell_repo_get_submodels_from_shell_with_http_info(self, aas_id, **kwargs):  # noqa: E501
        """Retrieves all Submodels from the  Asset Administration Shell  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_get_submodels_from_shell_with_http_info(aas_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shell_repo_get_submodels_from_shell" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `shell_repo_get_submodels_from_shell`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}/aas/submodels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Result',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shell_repo_invoke_operation_by_id_short(self, aas_id, submodel_id_short, id_short_path_to_operation, **kwargs):  # noqa: E501
        """Invokes a specific operation from the Submodel synchronously or asynchronously  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_invoke_operation_by_id_short(aas_id, submodel_id_short, id_short_path_to_operation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: Submodel's short id (required)
        :param str id_short_path_to_operation: The IdShort path to the Operation (required)
        :param InvocationRequest body: The parameterized request object for the invocation
        :param bool _async: Determines whether the execution of the operation is asynchronous (true) or not (false)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shell_repo_invoke_operation_by_id_short_with_http_info(aas_id, submodel_id_short, id_short_path_to_operation, **kwargs)  # noqa: E501
        else:
            (data) = self.shell_repo_invoke_operation_by_id_short_with_http_info(aas_id, submodel_id_short, id_short_path_to_operation, **kwargs)  # noqa: E501
            return data

    def shell_repo_invoke_operation_by_id_short_with_http_info(self, aas_id, submodel_id_short, id_short_path_to_operation, **kwargs):  # noqa: E501
        """Invokes a specific operation from the Submodel synchronously or asynchronously  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_invoke_operation_by_id_short_with_http_info(aas_id, submodel_id_short, id_short_path_to_operation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: Submodel's short id (required)
        :param str id_short_path_to_operation: The IdShort path to the Operation (required)
        :param InvocationRequest body: The parameterized request object for the invocation
        :param bool _async: Determines whether the execution of the operation is asynchronous (true) or not (false)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id', 'submodel_id_short', 'id_short_path_to_operation', 'body', '_async']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shell_repo_invoke_operation_by_id_short" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `shell_repo_invoke_operation_by_id_short`")  # noqa: E501
        # verify the required parameter 'submodel_id_short' is set
        if ('submodel_id_short' not in params or
                params['submodel_id_short'] is None):
            raise ValueError("Missing the required parameter `submodel_id_short` when calling `shell_repo_invoke_operation_by_id_short`")  # noqa: E501
        # verify the required parameter 'id_short_path_to_operation' is set
        if ('id_short_path_to_operation' not in params or
                params['id_short_path_to_operation'] is None):
            raise ValueError("Missing the required parameter `id_short_path_to_operation` when calling `shell_repo_invoke_operation_by_id_short`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501
        if 'submodel_id_short' in params:
            path_params['submodelIdShort'] = params['submodel_id_short']  # noqa: E501
        if 'id_short_path_to_operation' in params:
            path_params['idShortPathToOperation'] = params['id_short_path_to_operation']  # noqa: E501

        query_params = []
        if '_async' in params:
            query_params.append(('async', params['_async']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements/{idShortPathToOperation}/invoke', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shell_repo_put_submodel_element(self, aas_id, submodel_id_short, se_id_short_path, **kwargs):  # noqa: E501
        """Creates or updates a Submodel-Element at the Submodel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_put_submodel_element(aas_id, submodel_id_short, se_id_short_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :param str se_id_short_path: The Submodel-Element's IdShort-Path (required)
        :param SubmodelElement body: The Submodel-Element object
        :return: SubmodelElement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shell_repo_put_submodel_element_with_http_info(aas_id, submodel_id_short, se_id_short_path, **kwargs)  # noqa: E501
        else:
            (data) = self.shell_repo_put_submodel_element_with_http_info(aas_id, submodel_id_short, se_id_short_path, **kwargs)  # noqa: E501
            return data

    def shell_repo_put_submodel_element_with_http_info(self, aas_id, submodel_id_short, se_id_short_path, **kwargs):  # noqa: E501
        """Creates or updates a Submodel-Element at the Submodel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_put_submodel_element_with_http_info(aas_id, submodel_id_short, se_id_short_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :param str se_id_short_path: The Submodel-Element's IdShort-Path (required)
        :param SubmodelElement body: The Submodel-Element object
        :return: SubmodelElement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id', 'submodel_id_short', 'se_id_short_path', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shell_repo_put_submodel_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `shell_repo_put_submodel_element`")  # noqa: E501
        # verify the required parameter 'submodel_id_short' is set
        if ('submodel_id_short' not in params or
                params['submodel_id_short'] is None):
            raise ValueError("Missing the required parameter `submodel_id_short` when calling `shell_repo_put_submodel_element`")  # noqa: E501
        # verify the required parameter 'se_id_short_path' is set
        if ('se_id_short_path' not in params or
                params['se_id_short_path'] is None):
            raise ValueError("Missing the required parameter `se_id_short_path` when calling `shell_repo_put_submodel_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501
        if 'submodel_id_short' in params:
            path_params['submodelIdShort'] = params['submodel_id_short']  # noqa: E501
        if 'se_id_short_path' in params:
            path_params['seIdShortPath'] = params['se_id_short_path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements/{seIdShortPath}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubmodelElement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shell_repo_put_submodel_element_value_by_id_short(self, aas_id, submodel_id_short, se_id_short_path, **kwargs):  # noqa: E501
        """Updates the Submodel-Element's value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_put_submodel_element_value_by_id_short(aas_id, submodel_id_short, se_id_short_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :param str se_id_short_path: The Submodel-Element's IdShort-Path (required)
        :param object body: The new value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shell_repo_put_submodel_element_value_by_id_short_with_http_info(aas_id, submodel_id_short, se_id_short_path, **kwargs)  # noqa: E501
        else:
            (data) = self.shell_repo_put_submodel_element_value_by_id_short_with_http_info(aas_id, submodel_id_short, se_id_short_path, **kwargs)  # noqa: E501
            return data

    def shell_repo_put_submodel_element_value_by_id_short_with_http_info(self, aas_id, submodel_id_short, se_id_short_path, **kwargs):  # noqa: E501
        """Updates the Submodel-Element's value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_put_submodel_element_value_by_id_short_with_http_info(aas_id, submodel_id_short, se_id_short_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :param str se_id_short_path: The Submodel-Element's IdShort-Path (required)
        :param object body: The new value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id', 'submodel_id_short', 'se_id_short_path', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shell_repo_put_submodel_element_value_by_id_short" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `shell_repo_put_submodel_element_value_by_id_short`")  # noqa: E501
        # verify the required parameter 'submodel_id_short' is set
        if ('submodel_id_short' not in params or
                params['submodel_id_short'] is None):
            raise ValueError("Missing the required parameter `submodel_id_short` when calling `shell_repo_put_submodel_element_value_by_id_short`")  # noqa: E501
        # verify the required parameter 'se_id_short_path' is set
        if ('se_id_short_path' not in params or
                params['se_id_short_path'] is None):
            raise ValueError("Missing the required parameter `se_id_short_path` when calling `shell_repo_put_submodel_element_value_by_id_short`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501
        if 'submodel_id_short' in params:
            path_params['submodelIdShort'] = params['submodel_id_short']  # noqa: E501
        if 'se_id_short_path' in params:
            path_params['seIdShortPath'] = params['se_id_short_path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}/aas/submodels/{submodelIdShort}/submodel/submodelElements/{seIdShortPath}/value', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shell_repo_put_submodel_to_shell(self, aas_id, submodel_id_short, **kwargs):  # noqa: E501
        """Creates or updates a Submodel to an existing Asset Administration Shell  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_put_submodel_to_shell(aas_id, submodel_id_short, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :param Submodel body: The serialized Submodel object
        :return: Submodel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shell_repo_put_submodel_to_shell_with_http_info(aas_id, submodel_id_short, **kwargs)  # noqa: E501
        else:
            (data) = self.shell_repo_put_submodel_to_shell_with_http_info(aas_id, submodel_id_short, **kwargs)  # noqa: E501
            return data

    def shell_repo_put_submodel_to_shell_with_http_info(self, aas_id, submodel_id_short, **kwargs):  # noqa: E501
        """Creates or updates a Submodel to an existing Asset Administration Shell  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shell_repo_put_submodel_to_shell_with_http_info(aas_id, submodel_id_short, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :param Submodel body: The serialized Submodel object
        :return: Submodel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id', 'submodel_id_short', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shell_repo_put_submodel_to_shell" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `shell_repo_put_submodel_to_shell`")  # noqa: E501
        # verify the required parameter 'submodel_id_short' is set
        if ('submodel_id_short' not in params or
                params['submodel_id_short'] is None):
            raise ValueError("Missing the required parameter `submodel_id_short` when calling `shell_repo_put_submodel_to_shell`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501
        if 'submodel_id_short' in params:
            path_params['submodelIdShort'] = params['submodel_id_short']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}/aas/submodels/{submodelIdShort}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Submodel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shells_aas_id_aas_submodels_submodel_id_short_get(self, aas_id, submodel_id_short, **kwargs):  # noqa: E501
        """Retrieves the Submodel from the Asset Administration Shell  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shells_aas_id_aas_submodels_submodel_id_short_get(aas_id, submodel_id_short, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :return: Submodel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shells_aas_id_aas_submodels_submodel_id_short_get_with_http_info(aas_id, submodel_id_short, **kwargs)  # noqa: E501
        else:
            (data) = self.shells_aas_id_aas_submodels_submodel_id_short_get_with_http_info(aas_id, submodel_id_short, **kwargs)  # noqa: E501
            return data

    def shells_aas_id_aas_submodels_submodel_id_short_get_with_http_info(self, aas_id, submodel_id_short, **kwargs):  # noqa: E501
        """Retrieves the Submodel from the Asset Administration Shell  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shells_aas_id_aas_submodels_submodel_id_short_get_with_http_info(aas_id, submodel_id_short, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :param str submodel_id_short: The Submodel's short id (required)
        :return: Submodel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id', 'submodel_id_short']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shells_aas_id_aas_submodels_submodel_id_short_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `shells_aas_id_aas_submodels_submodel_id_short_get`")  # noqa: E501
        # verify the required parameter 'submodel_id_short' is set
        if ('submodel_id_short' not in params or
                params['submodel_id_short'] is None):
            raise ValueError("Missing the required parameter `submodel_id_short` when calling `shells_aas_id_aas_submodels_submodel_id_short_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501
        if 'submodel_id_short' in params:
            path_params['submodelIdShort'] = params['submodel_id_short']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}/aas/submodels/{submodelIdShort}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Submodel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shells_aas_id_get(self, aas_id, **kwargs):  # noqa: E501
        """Retrieves a specific Asset Administration Shell from the Asset Administration Shell repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shells_aas_id_get(aas_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :return: AssetAdministrationShell
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shells_aas_id_get_with_http_info(aas_id, **kwargs)  # noqa: E501
        else:
            (data) = self.shells_aas_id_get_with_http_info(aas_id, **kwargs)  # noqa: E501
            return data

    def shells_aas_id_get_with_http_info(self, aas_id, **kwargs):  # noqa: E501
        """Retrieves a specific Asset Administration Shell from the Asset Administration Shell repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shells_aas_id_get_with_http_info(aas_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aas_id: The Asset Administration Shell's unique id (required)
        :return: AssetAdministrationShell
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aas_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shells_aas_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aas_id' is set
        if ('aas_id' not in params or
                params['aas_id'] is None):
            raise ValueError("Missing the required parameter `aas_id` when calling `shells_aas_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aas_id' in params:
            path_params['aasId'] = params['aas_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shells/{aasId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetAdministrationShell',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
